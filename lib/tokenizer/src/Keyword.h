
#ifndef KEYWORD_H
#define KEYWORD_H

#include <map>
#include <string>

#include "TokenId.h"

/** Classify identifiers into keywords */
class Keyword {
public:
	enum IdentifierType {
		FIRST = TokenId::KEYWORD,
		IDENTIFIER,	// Plain identifier (not a keyword)
		K_False,
		K_None,
		K_True,
		K_abstract,
		K_alignas,
		K_alignof,
		K_and,
		K_and_eq,
		K_array,
		K_as,
		K_asm,
		K_assert,
		K_async,
		K_atomic_cancel,
		K_atomic_commit,
		K_atomic_noexcept,
		K_auto,
		K_await,
		K_base,
		K_bitand,
		K_bitor,
		K_bool,
		K_boolean,
		K_break,
		K_byte,
		K_callable,
		K_case,
		K_catch,
		K_char,
		K_char16_t,
		K_char32_t,
		K_checked,
		K_class,
		K_clone,
		K_co_await,
		K_co_return,
		K_co_yield,
		K_compl,
		K_concept,
		K_const,
		K_const_cast,
		K_constexpr,
		K_continue,
		K_decimal,
		K_declare,
		K_decltype,
		K_def,
		K_default,
		K_define,
		K_del,
		K_delegate,
		K_delete,
		K_die,
		K_do,
		K_double,
		K_dynamic_cast,
		K_echo,
		K_elif,
		K_else,
		K_elseif,
		K_empty,
		K_enddeclare,
		K_endfor,
		K_endforeach,
		K_endif,
		K_endregion,
		K_endswitch,
		K_endwhile,
		K_enum,
		K_error,
		K_eval,
		K_event,
		K_except,
		K_exit,
		K_explicit,
		K_export,
		K_extends,
		K_extern,
		K_false,
		K_final,
		K_finally,
		K_fixed,
		K_float,
		K_for,
		K_foreach,
		K_friend,
		K_from,
		K_function,
		K_global,
		K_goto,
		K_if,
		K_ifdef,
		K_ifndef,
		K_implements,
		K_implicit,
		K_import,
		K_in,
		K_include,
		K_include_once,
		K_inline,
		K_instanceof,
		K_insteadof,
		K_int,
		K_interface,
		K_internal,
		K_is,
		K_isset,
		K_lambda,
		K_line,
		K_list,
		K_lock,
		K_long,
		K_module,
		K_mutable,
		K_namespace,
		K_native,
		K_new,
		K_noalias,
		K_noexcept,
		K_nonlocal,
		K_not,
		K_not_eq,
		K_null,
		K_nullptr,
		K_object,
		K_operator,
		K_or,
		K_or_eq,
		K_out,
		K_override,
		K_package,
		K_params,
		K_pass,
		K_pragma,
		K_print,
		K_private,
		K_protected,
		K_public,
		K_raise,
		K_readonly,
		K_ref,
		K_region,
		K_register,
		K_reinterpret_cast,
		K_require,
		K_require_once,
		K_requires,
		K_restrict,
		K_return,
		K_sbyte,
		K_sealed,
		K_short,
		K_signed,
		K_sizeof,
		K_stackalloc,
		K_static,
		K_static_assert,
		K_static_cast,
		K_strictfp,
		K_string,
		K_struct,
		K_super,
		K_switch,
		K_synchronized,
		K_template,
		K_this,
		K_thread_local,
		K_throw,
		K_throws,
		K_trait,
		K_transient,
		K_true,
		K_try,
		K_typedef,
		K_typeid,
		K_typename,
		K_typeof,
		K_uint,
		K_ulong,
		K_unchecked,
		K_undef,
		K_union,
		K_unsafe,
		K_unset,
		K_unsigned,
		K_use,
		K_ushort,
		K_using,
		K_var,
		K_virtual,
		K_void,
		K_volatile,
		K_warning,
		K_wchar_t,
		K_while,
		K_with,
		K_xor,
		K_xor_eq,
		K_yield,

		LAST,		// Last value (295)
	};
private:
	// Keyword map
	typedef std::map <std::string, enum IdentifierType> KeywordMap;
	typedef std::map <int, std::string> TokenMap;
	KeywordMap km;
	TokenMap tm;
public:
	Keyword() {
		km = {
			{"isset", K_isset },
			{"compl", K_compl },
			{"array", K_array },
			{"decltype", K_decltype },
			{"define", K_define },
			{"as", K_as },
			{"null", K_null },
			{"asm", K_asm },
			{"public", K_public },
			{"decimal", K_decimal },
			{"event", K_event },
			{"out", K_out },
			{"wchar_t", K_wchar_t },
			{"and", K_and },
			{"package", K_package },
			{"warning", K_warning },
			{"eval", K_eval },
			{"require", K_require },
			{"constexpr", K_constexpr },
			{"const", K_const },
			{"endwhile", K_endwhile },
			{"raise", K_raise },
			{"empty", K_empty },
			{"register", K_register },
			{"pragma", K_pragma },
			{"base", K_base },
			{"try", K_try },
			{"co_yield", K_co_yield },
			{"final", K_final },
			{"double", K_double },
			{"nullptr", K_nullptr },
			{"list", K_list },
			{"reinterpret_cast", K_reinterpret_cast },
			{"async", K_async },
			{"bool", K_bool },
			{"implicit", K_implicit },
			{"this", K_this },
			{"using", K_using },
			{"sealed", K_sealed },
			{"float", K_float },
			{"dynamic_cast", K_dynamic_cast },
			{"friend", K_friend },
			{"use", K_use },
			{"char16_t", K_char16_t },
			{"implements", K_implements },
			{"error", K_error },
			{"global", K_global },
			{"readonly", K_readonly },
			{"import", K_import },
			{"int", K_int },
			{"function", K_function },
			{"declare", K_declare },
			{"inline", K_inline },
			{"synchronized", K_synchronized },
			{"lock", K_lock },
			{"ref", K_ref },
			{"native", K_native },
			{"from", K_from },
			{"in", K_in },
			{"true", K_true },
			{"not", K_not },
			{"uint", K_uint },
			{"union", K_union },
			{"print", K_print },
			{"string", K_string },
			{"static_cast", K_static_cast },
			{"false", K_false },
			{"break", K_break },
			{"override", K_override },
			{"restrict", K_restrict },
			{"do", K_do },
			{"ushort", K_ushort },
			{"return", K_return },
			{"extends", K_extends },
			{"concept", K_concept },
			{"long", K_long },
			{"template", K_template },
			{"False", K_False },
			{"None", K_None },
			{"finally", K_finally },
			{"continue", K_continue },
			{"atomic_noexcept", K_atomic_noexcept },
			{"pass", K_pass },
			{"object", K_object },
			{"unchecked", K_unchecked },
			{"case", K_case },
			{"short", K_short },
			{"else", K_else },
			{"void", K_void },
			{"alignas", K_alignas },
			{"noalias", K_noalias },
			{"endswitch", K_endswitch },
			{"extern", K_extern },
			{"enddeclare", K_enddeclare },
			{"typename", K_typename },
			{"unsafe", K_unsafe },
			{"await", K_await },
			{"elseif", K_elseif },
			{"thread_local", K_thread_local },
			{"static", K_static },
			{"def", K_def },
			{"region", K_region },
			{"private", K_private },
			{"foreach", K_foreach },
			{"atomic_commit", K_atomic_commit },
			{"explicit", K_explicit },
			{"goto", K_goto },
			{"yield", K_yield },
			{"interface", K_interface },
			{"throw", K_throw },
			{"default", K_default },
			{"typedef", K_typedef },
			{"namespace", K_namespace },
			{"module", K_module },
			{"atomic_cancel", K_atomic_cancel },
			{"new", K_new },
			{"boolean", K_boolean },
			{"ifdef", K_ifdef },
			{"bitand", K_bitand },
			{"include", K_include },
			{"requires", K_requires },
			{"struct", K_struct },
			{"abstract", K_abstract },
			{"echo", K_echo },
			{"bitor", K_bitor },
			{"for", K_for },
			{"except", K_except },
			{"enum", K_enum },
			{"transient", K_transient },
			{"sizeof", K_sizeof },
			{"strictfp", K_strictfp },
			{"endif", K_endif },
			{"const_cast", K_const_cast },
			{"super", K_super },
			{"co_await", K_co_await },
			{"signed", K_signed },
			{"stackalloc", K_stackalloc },
			{"or_eq", K_or_eq },
			{"volatile", K_volatile },
			{"unsigned", K_unsigned },
			{"co_return", K_co_return },
			{"mutable", K_mutable },
			{"params", K_params },
			{"class", K_class },
			{"undef", K_undef },
			{"elif", K_elif },
			{"trait", K_trait },
			{"del", K_del },
			{"export", K_export },
			{"is", K_is },
			{"internal", K_internal },
			{"require_once", K_require_once },
			{"fixed", K_fixed },
			{"exit", K_exit },
			{"True", K_True },
			{"endregion", K_endregion },
			{"sbyte", K_sbyte },
			{"char", K_char },
			{"typeof", K_typeof },
			{"include_once", K_include_once },
			{"typeid", K_typeid },
			{"var", K_var },
			{"switch", K_switch },
			{"noexcept", K_noexcept },
			{"delegate", K_delegate },
			{"clone", K_clone },
			{"if", K_if },
			{"checked", K_checked },
			{"xor_eq", K_xor_eq },
			{"virtual", K_virtual },
			{"delete", K_delete },
			{"with", K_with },
			{"static_assert", K_static_assert },
			{"catch", K_catch },
			{"protected", K_protected },
			{"endfor", K_endfor },
			{"and_eq", K_and_eq },
			{"byte", K_byte },
			{"or", K_or },
			{"auto", K_auto },
			{"ifndef", K_ifndef },
			{"char32_t", K_char32_t },
			{"throws", K_throws },
			{"xor", K_xor },
			{"not_eq", K_not_eq },
			{"assert", K_assert },
			{"ulong", K_ulong },
			{"insteadof", K_insteadof },
			{"nonlocal", K_nonlocal },
			{"endforeach", K_endforeach },
			{"while", K_while },
			{"lambda", K_lambda },
			{"alignof", K_alignof },
			{"operator", K_operator },
			{"unset", K_unset },
			{"instanceof", K_instanceof },
			{"callable", K_callable },
			{"line", K_line },
			{"die", K_die },

		};
		tm = {
			{K_yield, "yield" },
			{K_typename, "typename" },
			{K_default, "default" },
			{K_not, "not" },
			{K_void, "void" },
			{K_char, "char" },
			{K_trait, "trait" },
			{K_noalias, "noalias" },
			{K_extern, "extern" },
			{K_elif, "elif" },
			{K_event, "event" },
			{K_and, "and" },
			{K_true, "true" },
			{K_abstract, "abstract" },
			{K_line, "line" },
			{K_callable, "callable" },
			{K_xor, "xor" },
			{K_sealed, "sealed" },
			{K_endfor, "endfor" },
			{K_compl, "compl" },
			{K_case, "case" },
			{K_unsigned, "unsigned" },
			{K_require, "require" },
			{K_using, "using" },
			{K_atomic_cancel, "atomic_cancel" },
			{K_float, "float" },
			{K_package, "package" },
			{K_True, "True" },
			{K_or, "or" },
			{K_isset, "isset" },
			{K_readonly, "readonly" },
			{K_super, "super" },
			{K_empty, "empty" },
			{K_wchar_t, "wchar_t" },
			{K_co_await, "co_await" },
			{K_explicit, "explicit" },
			{K_break, "break" },
			{K_string, "string" },
			{K_endswitch, "endswitch" },
			{K_finally, "finally" },
			{K_enddeclare, "enddeclare" },
			{K_object, "object" },
			{K_params, "params" },
			{K_out, "out" },
			{K_bitor, "bitor" },
			{K_null, "null" },
			{K_restrict, "restrict" },
			{K_alignas, "alignas" },
			{K_stackalloc, "stackalloc" },
			{K_class, "class" },
			{K_implicit, "implicit" },
			{K_union, "union" },
			{K_long, "long" },
			{K_lock, "lock" },
			{K_noexcept, "noexcept" },
			{K_endforeach, "endforeach" },
			{K_include, "include" },
			{K_internal, "internal" },
			{K_checked, "checked" },
			{K_die, "die" },
			{K_unsafe, "unsafe" },
			{K_friend, "friend" },
			{K_interface, "interface" },
			{K_global, "global" },
			{K_array, "array" },
			{K_undef, "undef" },
			{K_unchecked, "unchecked" },
			{K_in, "in" },
			{K_include_once, "include_once" },
			{K_static_assert, "static_assert" },
			{K_base, "base" },
			{K_protected, "protected" },
			{K_requires, "requires" },
			{K_async, "async" },
			{K_list, "list" },
			{K_typedef, "typedef" },
			{K_asm, "asm" },
			{K_virtual, "virtual" },
			{K_dynamic_cast, "dynamic_cast" },
			{K_typeid, "typeid" },
			{K_goto, "goto" },
			{K_ifdef, "ifdef" },
			{K_co_return, "co_return" },
			{K_typeof, "typeof" },
			{K_eval, "eval" },
			{K_exit, "exit" },
			{K_char16_t, "char16_t" },
			{K_final, "final" },
			{K_operator, "operator" },
			{K_const_cast, "const_cast" },
			{K_define, "define" },
			{K_print, "print" },
			{K_register, "register" },
			{K_elseif, "elseif" },
			{K_assert, "assert" },
			{K_False, "False" },
			{K_else, "else" },
			{K_sbyte, "sbyte" },
			{K_co_yield, "co_yield" },
			{K_short, "short" },
			{K_while, "while" },
			{K_mutable, "mutable" },
			{K_alignof, "alignof" },
			{K_pass, "pass" },
			{K_bitand, "bitand" },
			{K_bool, "bool" },
			{K_echo, "echo" },
			{K_public, "public" },
			{K_endwhile, "endwhile" },
			{K_auto, "auto" },
			{K_or_eq, "or_eq" },
			{K_return, "return" },
			{K_if, "if" },
			{K_override, "override" },
			{K_warning, "warning" },
			{K_with, "with" },
			{K_constexpr, "constexpr" },
			{K_module, "module" },
			{K_atomic_noexcept, "atomic_noexcept" },
			{K_strictfp, "strictfp" },
			{K_xor_eq, "xor_eq" },
			{K_byte, "byte" },
			{K_signed, "signed" },
			{K_enum, "enum" },
			{K_export, "export" },
			{K_declare, "declare" },
			{K_unset, "unset" },
			{K_instanceof, "instanceof" },
			{K_from, "from" },
			{K_region, "region" },
			{K_new, "new" },
			{K_ushort, "ushort" },
			{K_ulong, "ulong" },
			{K_insteadof, "insteadof" },
			{K_endif, "endif" },
			{K_extends, "extends" },
			{K_namespace, "namespace" },
			{K_decltype, "decltype" },
			{K_nonlocal, "nonlocal" },
			{K_switch, "switch" },
			{K_struct, "struct" },
			{K_static_cast, "static_cast" },
			{K_implements, "implements" },
			{K_None, "None" },
			{K_do, "do" },
			{K_require_once, "require_once" },
			{K_transient, "transient" },
			{K_static, "static" },
			{K_as, "as" },
			{K_double, "double" },
			{K_atomic_commit, "atomic_commit" },
			{K_await, "await" },
			{K_boolean, "boolean" },
			{K_var, "var" },
			{K_foreach, "foreach" },
			{K_function, "function" },
			{K_native, "native" },
			{K_pragma, "pragma" },
			{K_is, "is" },
			{K_ifndef, "ifndef" },
			{K_uint, "uint" },
			{K_ref, "ref" },
			{K_private, "private" },
			{K_def, "def" },
			{K_error, "error" },
			{K_for, "for" },
			{K_clone, "clone" },
			{K_const, "const" },
			{K_not_eq, "not_eq" },
			{K_nullptr, "nullptr" },
			{K_raise, "raise" },
			{K_import, "import" },
			{K_sizeof, "sizeof" },
			{K_del, "del" },
			{K_inline, "inline" },
			{K_char32_t, "char32_t" },
			{K_delete, "delete" },
			{K_and_eq, "and_eq" },
			{K_try, "try" },
			{K_reinterpret_cast, "reinterpret_cast" },
			{K_synchronized, "synchronized" },
			{K_throw, "throw" },
			{K_throws, "throws" },
			{K_use, "use" },
			{K_template, "template" },
			{K_concept, "concept" },
			{K_volatile, "volatile" },
			{K_endregion, "endregion" },
			{K_fixed, "fixed" },
			{K_int, "int" },
			{K_except, "except" },
			{K_lambda, "lambda" },
			{K_false, "false" },
			{K_this, "this" },
			{K_decimal, "decimal" },
			{K_delegate, "delegate" },
			{K_continue, "continue" },
			{K_catch, "catch" },
			{K_thread_local, "thread_local" },

		};
	}

	enum IdentifierType identifier_type(const std::string &s) {
		auto f = km.find(s);
		if (f == km.end())
			return IDENTIFIER;
		else
			return f->second;
	}

	const std::string & to_string(int k) const {
		static const std::string UNKNOWN("???");

		auto t = tm.find(k);
		return t == tm.end() ? UNKNOWN : t->second;
	}
};
#endif /* KEYWORD_H */
